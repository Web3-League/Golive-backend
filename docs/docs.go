// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate user and get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Account deactivated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout user and clear authentication cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current authenticated user information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get Current User",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh JWT token using existing token from cookie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh JWT Token",
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid or missing token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Account deactivated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Email or username already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "description": "Get list of available stream categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Streams"
                ],
                "summary": "List Stream Categories",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/endpoints": {
            "get": {
                "description": "Get a comprehensive list of all available API endpoints",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "List API Endpoints",
                "responses": {
                    "200": {
                        "description": "List of all API endpoints with methods and descriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health status of the API and its dependencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "API is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Service unavailable - Database or Redis unhealthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/me/streams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of streams for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Streams"
                ],
                "summary": "Get Current User's Streams",
                "responses": {
                    "200": {
                        "description": "User's streams",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new stream for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Streams"
                ],
                "summary": "Create New Stream",
                "parameters": [
                    {
                        "description": "Stream creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateStreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "User already has an active stream",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/me/streams/{key}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update stream information (owner only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Streams"
                ],
                "summary": "Update Stream",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stream Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Stream update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateStreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Validation error or no updates",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - not stream owner",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Stream not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a stream (owner only)",
                "tags": [
                    "Streams"
                ],
                "summary": "Delete Stream",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stream Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Stream key required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden - not stream owner",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Stream not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/me/streams/{key}/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a stream (set it as live)",
                "tags": [
                    "Streams"
                ],
                "summary": "Start Stream",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stream Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream started successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Stream key required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/me/streams/{key}/stop": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stop a stream (set it as offline)",
                "tags": [
                    "Streams"
                ],
                "summary": "Stop Stream",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stream Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream stopped successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Stream key required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Get system metrics and statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "System Metrics",
                "responses": {
                    "200": {
                        "description": "System metrics including user count, active streams, etc.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/realtime/channels": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retourne la liste complète des channels en mémoire.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Lister les channels actifs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ChannelListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retourne la configuration et les statistiques instantanées du channel.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Récupérer les informations d'un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/realtime.ChannelInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/access": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ajoute une liste d'utilisateurs autorisés sur un channel privé.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Autoriser l'accès à un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Liste des utilisateurs",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChannelAccessRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/access/{userID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Supprime l'accès d'un utilisateur à un channel privé.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Révoquer l'accès d'un utilisateur",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID utilisateur",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/broadcast": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Envoie un message système à tous les clients abonnés.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Diffuser un message système sur un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload système",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BroadcastRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.BroadcastResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/clear": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Efface l'historique d'un channel et avertit les clients.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Vider un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActionResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retourne les derniers messages d'un channel temps réel.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Récupérer l'historique d'un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 1000,
                        "type": "integer",
                        "description": "Nombre maximum de messages",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Identifiant du message à partir duquel récupérer",
                        "name": "since",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/messages/{messageID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Supprime un message spécifique et informe les clients connectés.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Supprimer un message d'un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Identifiant du message",
                        "name": "messageID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/presence": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retourne la liste des utilisateurs actuellement connectés sur le channel.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Récupérer la présence d'un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PresenceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/presence/sync": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remplace la présence en mémoire par la liste fournie (usage déporté).",
                "tags": [
                    "Realtime"
                ],
                "summary": "Synchroniser la présence d'un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Liste de présence",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PresenceSyncRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/publish": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Publie un message pour tous les clients abonnés au channel spécifié.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Publier un message sur un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload du message",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublishRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PublishResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/settings": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ajuste les limites et règles d'accès d'un channel temps réel.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Mettre à jour les paramètres d'un channel",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Paramètres du channel",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ChannelSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/realtime.ChannelSettings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/users/{userID}/ban": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Empêche définitivement un utilisateur de publier sur le channel.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Bannir un utilisateur",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID utilisateur ciblé",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Motif du ban",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.BanResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retire un ban précédemment appliqué et notifie le channel.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Débannir un utilisateur",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID utilisateur ciblé",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ActionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/channels/{channel}/users/{userID}/timeout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Applique un timeout temporaire sur un utilisateur pour le channel cible.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Timeout un utilisateur",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Channel ID (namespace:identifiant)",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID utilisateur ciblé",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Paramètres du timeout",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TimeoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TimeoutResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/rpc": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exécute une méthode RPC exposée par le serveur realtime.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Appeler un RPC realtime",
                "parameters": [
                    {
                        "description": "Requête RPC",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RPCRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RPCResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/realtime/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retourne des informations agrégées sur les channels et clients connectés.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Obtenir les statistiques du serveur realtime",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/realtime.ServerStats"
                        }
                    }
                }
            }
        },
        "/streams": {
            "get": {
                "description": "Get list of public streams with pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Streams"
                ],
                "summary": "List Public Streams",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Number of streams to return (max 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Number of streams to skip",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter only live streams",
                        "name": "live",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of streams with pagination",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/streams/{key}": {
            "get": {
                "description": "Get specific stream information by stream key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Streams"
                ],
                "summary": "Get Stream by Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stream Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Stream key required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Stream not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/streams/{key}/analytics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get analytics data for a specific stream (not implemented yet)",
                "tags": [
                    "Streams"
                ],
                "summary": "Get Stream Analytics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Stream Key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stream analytics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the profile information of the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Current User Profile",
                "responses": {
                    "200": {
                        "description": "User profile information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the profile information of the currently authenticated user (Not implemented yet)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update Current User Profile",
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete the currently authenticated user's account (Not implemented yet)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete Current User Account",
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/me/followers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of users that are following the current user (Not implemented yet)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Followers List",
                "responses": {
                    "200": {
                        "description": "List of followers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/me/following": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of users that the current user is following (Not implemented yet)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Following List",
                "responses": {
                    "200": {
                        "description": "List of followed users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/me/streams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all streams belonging to the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Current User's Streams",
                "responses": {
                    "200": {
                        "description": "List of user's streams",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/{userID}/follow": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Follow another user (Not implemented yet)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Follow User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to follow",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User followed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unfollow a user (Not implemented yet)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Unfollow User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to unfollow",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User unfollowed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "501": {
                        "description": "Not implemented",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "Etablit une connexion WebSocket pour le serveur temps réel. L'authentification par jeton est optionnelle.",
                "tags": [
                    "Realtime"
                ],
                "summary": "Realtime WebSocket connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header"
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Connexion WebSocket acceptée",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.BanRequest": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                }
            }
        },
        "handlers.BanResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "handlers.BroadcastRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "handlers.BroadcastResponse": {
            "type": "object",
            "properties": {
                "broadcast": {
                    "type": "boolean"
                },
                "message_id": {
                    "type": "string"
                }
            }
        },
        "handlers.ChannelAccessRequest": {
            "type": "object",
            "properties": {
                "user_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handlers.ChannelListResponse": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/realtime.ChannelInfo"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "handlers.ChannelSettingsRequest": {
            "type": "object",
            "properties": {
                "allow_presence": {
                    "type": "boolean"
                },
                "allow_publish": {
                    "type": "boolean"
                },
                "allowed_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_clients": {
                    "type": "integer"
                },
                "max_history": {
                    "type": "integer"
                },
                "private": {
                    "type": "boolean"
                },
                "proxy_endpoint": {
                    "type": "string"
                },
                "require_auth": {
                    "type": "boolean"
                },
                "ttl_seconds": {
                    "type": "integer"
                }
            }
        },
        "handlers.CreateStreamRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Gaming"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "This is my streaming description"
                },
                "is_mature": {
                    "type": "boolean",
                    "example": false
                },
                "is_public": {
                    "type": "boolean",
                    "example": true
                },
                "language": {
                    "type": "string",
                    "maxLength": 10,
                    "example": "en"
                },
                "tags": {
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "gaming",
                        "live",
                        "fun"
                    ]
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "My Awesome Stream"
                }
            }
        },
        "handlers.HistoryResponse": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/realtime.Message"
                    }
                },
                "since": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "handlers.PresenceResponse": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "presence": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/realtime.PresenceInfo"
                    }
                }
            }
        },
        "handlers.PresenceSyncRequest": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/realtime.PresenceInfo"
                    }
                }
            }
        },
        "handlers.PublishRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "handlers.PublishResponse": {
            "type": "object",
            "properties": {
                "message_id": {
                    "type": "string"
                },
                "published": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "handlers.RPCRequest": {
            "type": "object",
            "properties": {
                "method": {
                    "type": "string"
                },
                "params": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "handlers.RPCResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "result": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "example": "password123"
                },
                "display_name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3,
                    "example": "johndoe"
                }
            }
        },
        "handlers.TimeoutRequest": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "handlers.TimeoutResponse": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "expires_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdateStreamRequest": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "Art"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "example": "Updated description"
                },
                "is_mature": {
                    "type": "boolean",
                    "example": true
                },
                "is_public": {
                    "type": "boolean",
                    "example": false
                },
                "language": {
                    "type": "string",
                    "maxLength": 10,
                    "example": "fr"
                },
                "tags": {
                    "type": "array",
                    "maxItems": 10,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "art",
                        "creative"
                    ]
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "Updated Stream Title"
                }
            }
        },
        "realtime.ChannelInfo": {
            "type": "object",
            "properties": {
                "client_count": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/realtime.ChannelSettings"
                }
            }
        },
        "realtime.ChannelSettings": {
            "type": "object",
            "properties": {
                "allow_presence": {
                    "type": "boolean"
                },
                "allow_publish": {
                    "type": "boolean"
                },
                "allowed_roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_clients": {
                    "type": "integer"
                },
                "max_history": {
                    "type": "integer"
                },
                "private": {
                    "type": "boolean"
                },
                "proxy_endpoint": {
                    "type": "string"
                },
                "require_auth": {
                    "type": "boolean"
                },
                "ttl": {
                    "type": "integer",
                    "format": "int64",
                    "example": 3600000000000
                }
            }
        },
        "realtime.Message": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/realtime.MessageType"
                },
                "user": {
                    "$ref": "#/definitions/realtime.UserInfo"
                }
            }
        },
        "realtime.MessageType": {
            "type": "string",
            "enum": [
                "connect",
                "disconnect",
                "subscribe",
                "unsubscribe",
                "publish",
                "presence",
                "join",
                "leave",
                "chat",
                "system",
                "error",
                "ping",
                "pong",
                "rpc"
            ],
            "x-enum-varnames": [
                "MessageTypeConnect",
                "MessageTypeDisconnect",
                "MessageTypeSubscribe",
                "MessageTypeUnsubscribe",
                "MessageTypePublish",
                "MessageTypePresence",
                "MessageTypeJoin",
                "MessageTypeLeave",
                "MessageTypeChat",
                "MessageTypeSystem",
                "MessageTypeError",
                "MessageTypePing",
                "MessageTypePong",
                "MessageTypeRPC"
            ]
        },
        "realtime.NamespaceStats": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "integer"
                },
                "clients": {
                    "type": "integer"
                }
            }
        },
        "realtime.PresenceInfo": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "joined_at": {
                    "type": "string"
                },
                "last_seen": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/realtime.UserInfo"
                }
            }
        },
        "realtime.ServerStats": {
            "type": "object",
            "properties": {
                "last_updated": {
                    "type": "string"
                },
                "namespace_stats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/realtime.NamespaceStats"
                    }
                },
                "total_channels": {
                    "type": "integer"
                },
                "total_clients": {
                    "type": "integer"
                },
                "uptime": {
                    "type": "integer",
                    "format": "int64",
                    "example": 3600000000000
                }
            }
        },
        "realtime.UserInfo": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": true
                },
                "error": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "GoLive API",
	Description:      "Live streaming platform API with chat",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
